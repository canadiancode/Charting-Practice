{"version":3,"sources":["script.js"],"names":["chartTimeframe","chartPrice","selectedAsset","selectedTimePeriod","fetchData","URL","fetch","response","json","data","prices","price","epochTimeframe","roundedprice","Math","round","formattedDate","Date","longTimeframe","toUTCString","timeframe","substring","push","displayedChart","labels","datasets","forEach","dataset","label","update","console","log","assetListURL","assetListEl","document","querySelector","assetList","getAssetList","assetListData","asset","id","assetIDs","listOptions","createElement","classList","add","value","appendChild","createTextNode","changeAsset","addEventListener","selectedTimePeriodEl","changeTimeframe","timeframeList","ctx","Chart","type","borderWidth","pointRadius","options"],"mappings":"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","file":"script.75da7f30.js","sourceRoot":"../src","sourcesContent":["    // Bitcoin data from an API\n\n// arrays for the price and timeframe\nlet chartTimeframe = [];\nlet chartPrice = [];\n\n// variables for the data\nlet selectedAsset = 'bitcoin';\nlet selectedTimePeriod = '365';\n\n// GET THE PRICE AND TIME OF ASSET\nasync function fetchData() {\n\n    try {\n        // link to fetch data from CoinGecko\n        let URL = `https://api.coingecko.com/api/v3/coins/${selectedAsset}/market_chart?vs_currency=usd&days=${selectedTimePeriod}`;\n\n        // Get the dataset from CoinGecko API\n        let response = await fetch(URL);\n        let data = await response.json();\n        let prices = await data.prices;\n\n        // remove the old data on the chart\n        chartTimeframe = [];\n        chartPrice = [];\n\n        // extraction of the desired data from dataset (time and price)\n        // use this instead of forEach for normal for loop for async await\n        for (const price of prices) {\n            // extract price and time values\n            let epochTimeframe = await price[0];\n            let roundedprice = Math.round(price[1]);\n\n            // change from Epoch time format to UTC\n            let formattedDate = new Date(epochTimeframe);\n            let longTimeframe = formattedDate.toUTCString();\n            let timeframe = longTimeframe.substring(4, 16);        \n\n            // add data to arrays\n            chartTimeframe.push(timeframe);\n            chartPrice.push(roundedprice);\n        }\n\n        // update the chart with new data\n        displayedChart.data.labels = chartTimeframe;\n        displayedChart.data.datasets.forEach(dataset => {\n            dataset.data = chartPrice;\n            dataset.label = `Price of ${selectedAsset}`;\n        });\n        displayedChart.update();\n    }\n    catch(error) {\n        console.log('cannot get data from coingecko...')\n        console.log(error);\n    }\n};\nfetchData();\n\n// GENERATE LIST OF ASSETS\nconst assetListURL = 'https://api.coingecko.com/api/v3/coins/list';\nconst assetListEl = document.querySelector('.assetList');\nconst assetList = [];\n\nasync function getAssetList() {\n    try {\n        // fetch the list of assets\n        let response = await fetch(assetListURL);\n        let assetListData = await response.json();\n\n        for (const asset of assetListData) {\n            let assetIDs = await asset.id;\n            const listOptions = document.createElement('option');\n            listOptions.classList.add('asset');\n            listOptions.value = await assetIDs;\n            listOptions.appendChild(document.createTextNode(assetIDs));\n            assetListEl.appendChild(listOptions);\n        }\n    }\n    catch(error) {\n        console.log(error);\n        console.log('cannot get list of assets from CoinGecko...');\n    }\n}\ngetAssetList();\n\n// change the asset on the chart\nfunction changeAsset() {\n    const assetList = document.querySelector('.assetList');\n    selectedAsset = assetList.value;\n    fetchData();\n};\nassetListEl.addEventListener('change', changeAsset);\n\n\n// change the timeframe on the chart\nconst selectedTimePeriodEl = document.querySelector('.timeframeList');\nfunction changeTimeframe() {\n    const timeframeList = document.querySelector('.timeframeList');\n    selectedTimePeriod = timeframeList.value;\n    fetchData();\n}\nselectedTimePeriodEl.addEventListener('change', changeTimeframe);\n\n\n    // Code for the charting librarby ChartJS\nconst ctx = document.querySelector('.chart');\n\nconst displayedChart = new Chart(ctx, {\n    type: 'line',\n    data: {\n      labels: [chartTimeframe],\n      datasets: [{\n        data: [chartPrice],\n        label: `Price of ${selectedAsset}`,\n        borderWidth: 1,\n        pointRadius: 0\n      }]\n    },\n    options: {}\n  });"]}