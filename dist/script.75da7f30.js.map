{"version":3,"sources":["script.js"],"names":["chartTimeframe","chartPrice","selectedAsset","selectedAssetName","selectedTimePeriod","fetchData","URL","fetch","response","json","data","prices","price","epochTimeframe","formattedDate","Date","longTimeframe","toUTCString","timeframe","substring","push","displayedChart","labels","datasets","forEach","dataset","label","update","console","log","assetListURL","assetListEl","document","querySelector","getAssetList","assetListData","asset","id","assetID","listOptions","createElement","classList","add","name","assetName","value","appendChild","createTextNode","changeAsset","assetList","selectedEl","options","selectedIndex","ID","selectedAssetListEl","addedAsset","removeButtonEl","buttonTextEl","addEventListener","selectedTimePeriodEl","changeTimeframe","timeframeList","chartScale","autoChartOption","changeChartScale","logChartOption","event","target","contains","linearScale","chart","scales","y","type","style","backgroundColor","logarithmicScale","ctx","Chart","borderWidth","pointRadius","ticks","callback","index","display","onresize","width","height"],"mappings":"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","file":"script.75da7f30.js","sourceRoot":"../src","sourcesContent":["\n    // FETCHING AND UPDATING THE CHART\n// arrays for the price and timeframe\nlet chartTimeframe = [];\nlet chartPrice = [];\n\n// variables for the data\nlet selectedAsset = 'bitcoin';\nlet selectedAssetName = 'Bitcoin';\nlet selectedTimePeriod = '365';\n\n    // GET THE PRICE AND TIME OF ASSET\nasync function fetchData() {\n\n    try {\n        // link to fetch data from CoinGecko\n        let URL = `https://api.coingecko.com/api/v3/coins/${selectedAsset}/market_chart?vs_currency=usd&days=${selectedTimePeriod}`;\n\n        // Get the dataset from CoinGecko API\n        let response = await fetch(URL);\n        let data = await response.json();\n        let prices = await data.prices;\n\n        // remove the old data on the chart\n        chartTimeframe = [];\n        chartPrice = [];\n\n        // extraction of the desired data from dataset (time and price)\n        // use this instead of forEach for normal for loop for async await\n        for (const price of prices) {\n            // change from Epoch time format to UTC\n            let epochTimeframe = await price[0];\n            let formattedDate = new Date(epochTimeframe);\n            let longTimeframe = formattedDate.toUTCString();\n            let timeframe = longTimeframe.substring(4, 16);        \n\n            // add data to arrays\n            chartTimeframe.push(timeframe);\n            chartPrice.push(price[1]);\n        }\n\n        // update the chart with new data\n        displayedChart.data.labels = chartTimeframe;\n        displayedChart.data.datasets.forEach(dataset => {\n            dataset.data = chartPrice;\n            dataset.label = `Price of ${selectedAssetName}`;\n        });\n        displayedChart.update();\n    }\n    catch(error) {\n        console.log('cannot get data from coingecko...')\n        console.log(error);\n    }\n};\nfetchData();\n\n    // GENERATE LIST OF ASSETS\nconst assetListURL = 'https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=250&page=1&sparkline=false';\nconst assetListEl = document.querySelector('.assetList');\n\nasync function getAssetList() {\n    try {\n        // fetch the list of assets\n        let response = await fetch(assetListURL);\n        let assetListData = await response.json();\n\n        for (const asset of assetListData) {\n\n            // for the ID \n            let assetID = await asset.id;\n            const listOptions = document.createElement('option');\n            listOptions.classList.add(assetID);\n\n            \n            // for the display name\n            let assetName = await asset.name;\n            listOptions.value = await assetName;\n\n            // add option onto the dropdown selection\n            listOptions.appendChild(document.createTextNode(assetName));\n            assetListEl.appendChild(listOptions);\n        }\n    }\n    catch(error) {\n        console.log(error);\n        console.log('cannot get list of assets from CoinGecko...');\n    }\n}\ngetAssetList();\n\n    // CHANGE THE ASSSET ON THE CHART\nfunction changeAsset() {\n    // change the data on the chart\n    const assetList = document.querySelector('.assetList');\n    let selectedEl = assetList.options[assetList.selectedIndex];\n    let ID = selectedEl.classList[0];\n    selectedAsset = ID;\n    selectedAssetName = assetList.value;\n    \n    // adding the tab on the selected list\n    const selectedAssetListEl = document.querySelector('.selectedAssetList');\n    const addedAsset = document.createElement('div');\n    addedAsset.classList.add('assetContainer');\n    const removeButtonEl = document.createElement('button');\n    removeButtonEl.appendChild(document.createTextNode('✖'));\n    removeButtonEl.classList.add('removeAsset');\n    addedAsset.appendChild(removeButtonEl);\n    const buttonTextEl = document.createElement('p');\n    buttonTextEl.classList.add('selectedAssetName');\n    buttonTextEl.appendChild(document.createTextNode(selectedAssetName));\n    addedAsset.appendChild(buttonTextEl);\n    selectedAssetListEl.appendChild(addedAsset);\n\n    // update the chart\n    fetchData();\n};\nassetListEl.addEventListener('change', changeAsset);\n\n\n    // CHANGE THE TIME PERIOD ON THE CHART\nconst selectedTimePeriodEl = document.querySelector('.timeframeList');\nfunction changeTimeframe() {\n    const timeframeList = document.querySelector('.timeframeList');\n    selectedTimePeriod = timeframeList.value;\n    fetchData();\n}\nselectedTimePeriodEl.addEventListener('change', changeTimeframe);\n\n    // CODE FOR CHANGING THE CHART SCALE\nlet chartScale = 'linear'; //logarithmic or linear\nconst autoChartOption = document.querySelector('.autoChartOption');\nautoChartOption.addEventListener('click', changeChartScale)\nconst logChartOption = document.querySelector('.logChartOption');\nlogChartOption.addEventListener('click', changeChartScale);\nfunction changeChartScale(event) {\n\n    if (event.target.classList.contains('autoChartOption')) {\n        autoChartOption.style.backgroundColor = 'rgb(128, 128, 128, 0.6)';\n        logChartOption.style.backgroundColor = 'rgb(128, 128, 128, 0.2)';\n        chartScale = 'linear';\n        function linearScale(chart) {\n            chart.options.scales.y = {\n                type: 'linear'\n            };\n            displayedChart.update();\n        }\n        linearScale();\n    } else {\n        autoChartOption.style.backgroundColor = 'rgb(128, 128, 128, 0.2)';\n        logChartOption.style.backgroundColor = 'rgb(128, 128, 128, 0.6)';\n        chartScale = 'logarithmic';\n        function logarithmicScale(chart) {\n            chart.options.scales.y = {\n                type: 'logarithmic'\n            };\n            displayedChart.update();\n        }\n        logarithmicScale();\n    }\n}\n\n\n\n    // CODE FOR THE CHART.JS LIBRARY\nconst ctx = document.querySelector('.chart');\n\nconst displayedChart = new Chart(ctx, {\n    type: 'line',\n    data: {\n      labels: [chartTimeframe],\n      datasets: [\n        {\n        data: [chartPrice],\n        label: `Price of ${selectedAsset}`,\n        borderWidth: 1,\n        pointRadius: 0\n        }\n      ]\n    },\n    options: {\n        scales: {\n            y: {\n                ticks: {\n                    callback: function(value, index, ticks) {\n                        return '$' + value;\n                    }\n                },\n                display: true,\n                type: 'logarithmic' //logarithmic or linear\n            }\n        }\n    }\n  });\n\n// event listener for keeping canvas proper size\nonresize = () => {\n    ctx.style.width = '100%';\n    ctx.style.height = '100%';\n}"]}