{"version":3,"sources":["script.js"],"names":["chartTimeframe","AddedPriceData","assetPricesData","selectedAssetIDs","selectedAssetNames","selectedAssetID","selectedAssetName","selectedTimePeriod","fetchTimeframe","URL","fetch","response","json","data","prices","price","epochTimeframe","formattedDate","Date","longTimeframe","toUTCString","timeframe","substring","push","displayedChart","labels","update","console","log","fetchPrice","newDataObject","label","fill","pointRadius","borderWidth","backgroundColor","borderColor","datasets","assetListURL","assetListEl","document","querySelector","addDataButton","getAssetList","assetListData","asset","id","assetID","listOptions","createElement","classList","add","name","assetName","value","appendChild","createTextNode","addAsset","assetList","selectedEl","options","selectedIndex","ID","selectedAssetListEl","addedAsset","removeButtonEl","buttonTextEl","fetchNewPrice","addEventListener","changeTimeframe","timeframeList","fetchNewTimeframe","timeframeURL","fetchedData","timeData","time","singleAssetPriceData","listOfAssetPrices","assetPriceURL","assetPriceData","assetPriceAndTime","forEach","array","justPrice","i","length","selectedTimePeriodEl","chartScale","autoChartOption","changeChartScale","logChartOption","event","target","contains","style","scales","y","type","ctx","Chart","ticks","callback","index","display","onresize","width","height"],"mappings":"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","file":"script.75da7f30.js","sourceRoot":"../src","sourcesContent":["\n    // FETCHING AND UPDATING THE CHART\n// arrays for the price and timeframe\nlet chartTimeframe = []; \nlet AddedPriceData = []; // the new asset getting added in\nlet assetPricesData = []; // list of all assets\n\n// variables for the data\nlet selectedAssetIDs = ['bitcoin'];\nlet selectedAssetNames = ['Bitcoin'];\nlet selectedAssetID = 'bitcoin';\nlet selectedAssetName = 'Bitcoin';\nlet selectedTimePeriod = '365';\n\n    // FETCH TIMEFRAME OF DATA\nasync function fetchTimeframe() {\n    try {\n        // link to fetch data from CoinGecko\n        let URL = `https://api.coingecko.com/api/v3/coins/${selectedAssetID}/market_chart?vs_currency=usd&days=${selectedTimePeriod}`;\n\n        // Get the dataset from CoinGecko API\n        let response = await fetch(URL);\n        let data = await response.json();\n        let prices = await data.prices;\n\n        // extraction of the desired data from dataset (time and price)\n        // use this instead of forEach for normal for loop for async await\n        chartTimeframe = [];\n        for (const price of prices) {\n            // change from Epoch time format to UTC\n            let epochTimeframe = await price[0];\n            let formattedDate = new Date(epochTimeframe);\n            let longTimeframe = formattedDate.toUTCString();\n            let timeframe = longTimeframe.substring(4, 16);        \n\n            // add time to label array\n            chartTimeframe.push(timeframe);\n        }\n\n        // update the chart with new timeframe\n        displayedChart.data.labels = chartTimeframe;\n        displayedChart.update();\n    }\n    catch(error) {\n        console.log('cannot get timeframe data from coingecko...')\n        console.log(error);\n    }\n};\n\n    // GET THE PRICE OF ASSET\nasync function fetchPrice() {\n    try {\n        // link to fetch data from CoinGecko\n        let URL = `https://api.coingecko.com/api/v3/coins/${selectedAssetIDs[0]}/market_chart?vs_currency=usd&days=${selectedTimePeriod}`;\n\n        // Get the dataset from CoinGecko API\n        let response = await fetch(URL);\n        let data = await response.json();\n        let prices = await data.prices;\n\n        // extraction of the desired data from dataset (time and price)\n        // use this instead of forEach for normal for loop for async await\n        AddedPriceData = [];\n        for (const price of prices) {\n            // add price data to arrays\n            AddedPriceData.push(price[1]);\n        }\n\n        // Adding new data to the assetPricesData array\n        let newDataObject = {\n            label: `Price of ${selectedAssetName}`,\n            data: AddedPriceData,\n            fill: false,\n            pointRadius: 0,\n            borderWidth: 1,\n            backgroundColor: \"rgba(255, 255, 255)\",\n            borderColor: \"rgb(255, 255, 255)\",\n        };\n        assetPricesData.push(newDataObject);\n        displayedChart.data.datasets = assetPricesData;\n        displayedChart.update();\n    }\n    catch(error) {\n        console.log('cannot get price data from coingecko...')\n        console.log(error);\n    }\n};\nfetchTimeframe();\nfetchPrice();\n\n    // GENERATE LIST OF ASSETS\nconst assetListURL = 'https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=250&page=1&sparkline=false';\nconst assetListEl = document.querySelector('.assetList');\nconst addDataButton = document.querySelector('.addDataButton');\nasync function getAssetList() {\n    try {\n        // fetch the list of assets\n        let response = await fetch(assetListURL);\n        let assetListData = await response.json();\n\n        for (const asset of assetListData) {\n            // for the ID \n            let assetID = await asset.id;\n            const listOptions = document.createElement('option');\n            listOptions.classList.add(assetID);\n\n            // for the display name\n            let assetName = await asset.name;\n            listOptions.value = await assetName;\n\n            // add option onto the dropdown selection\n            listOptions.appendChild(document.createTextNode(assetName));\n            assetListEl.appendChild(listOptions);\n        }\n    }\n    catch(error) {\n        console.log(error);\n        console.log('cannot get list of assets from CoinGecko...');\n    }\n}\ngetAssetList();\n\n    // ADD NEW ASSET TO THE CHART\nfunction addAsset() {\n\n    // change the data on the chart\n    const assetList = document.querySelector('.assetList');\n    let selectedEl = assetList.options[assetList.selectedIndex];\n    let ID = selectedEl.classList[0];\n    selectedAssetID = ID;\n    selectedAssetName = assetList.value;\n    selectedAssetNames.push(selectedAssetName);\n    selectedAssetIDs.push(ID);\n    \n    // adding the tab on the selected list\n    const selectedAssetListEl = document.querySelector('.selectedAssetList');\n    const addedAsset = document.createElement('div');\n    addedAsset.classList.add('assetContainer');\n    const removeButtonEl = document.createElement('button');\n    removeButtonEl.appendChild(document.createTextNode('✖'));\n    removeButtonEl.classList.add('removeAsset');\n    addedAsset.appendChild(removeButtonEl);\n    const buttonTextEl = document.createElement('p');\n    buttonTextEl.classList.add('selectedAssetName');\n    buttonTextEl.appendChild(document.createTextNode(selectedAssetName));\n    addedAsset.appendChild(buttonTextEl);\n    selectedAssetListEl.appendChild(addedAsset);\n\n    async function fetchNewPrice() {\n        try {\n            // link to fetch data from CoinGecko\n            let URL = `https://api.coingecko.com/api/v3/coins/${selectedAssetID}/market_chart?vs_currency=usd&days=${selectedTimePeriod}`;\n    \n            // Get the dataset from CoinGecko API\n            let response = await fetch(URL);\n            let data = await response.json();\n            let prices = await data.prices;\n    \n            // extraction of the desired data from dataset (time and price)\n            // use this instead of forEach for normal for loop for async await\n            AddedPriceData = [];\n            for (const price of prices) {\n                // add price data to arrays\n                AddedPriceData.push(price[1]);\n            }\n    \n            // Adding new data to the assetPricesData array\n            let newDataObject = {\n                label: `Price of ${selectedAssetName}`,\n                data: AddedPriceData,\n                fill: false,\n                pointRadius: 0,\n                borderWidth: 1,\n                backgroundColor: \"rgba(255, 255, 255)\",\n                borderColor: \"rgb(255, 255, 255)\",\n            };\n            assetPricesData.push(newDataObject);\n            displayedChart.data.datasets = assetPricesData;\n            displayedChart.update();\n        }\n        catch(error) {\n            console.log('cannot get price data from coingecko...')\n            console.log(error);\n        }\n    };\n\n    // update the chart\n    fetchNewPrice();\n    fetchTimeframe();\n\n};\naddDataButton.addEventListener('click', addAsset);\n\n\n    // CHANGE THE TIME PERIOD ON THE CHART\nfunction changeTimeframe() {\n    const timeframeList = document.querySelector('.timeframeList');\n    selectedTimePeriod = timeframeList.value;\n\n    assetPricesData = [];\n\n    async function fetchNewTimeframe() {\n        try {\n                // FETCH AND DISPLAY TIMEFRAME DATA\n            let timeframeURL = `https://api.coingecko.com/api/v3/coins/${selectedAssetID}/market_chart?vs_currency=usd&days=${selectedTimePeriod}`;\n            const response = await fetch(timeframeURL);\n            const fetchedData = await response.json();\n            const timeData = await fetchedData.prices;\n            \n            // remove old time data to replace with new data\n            chartTimeframe = [];\n\n            // looping through the fetched data and pushing to displayed array\n            for (const time of timeData) {\n                // change from Epoch time format to UTC\n                let epochTimeframe = await time[0];\n                let formattedDate = new Date(epochTimeframe);\n                let longTimeframe = formattedDate.toUTCString();\n                let timeframe = longTimeframe.substring(4, 16);   \n                chartTimeframe.push(timeframe);\n            }\n\n            // update the chart with the new time data\n            displayedChart.data.labels = chartTimeframe;\n            displayedChart.update();\n\n                // FETCH AND DISPLAY PRICE DATA\n            let singleAssetPriceData = [];\n            let listOfAssetPrices = [];\n            for (const asset of selectedAssetIDs) {\n                let assetPriceURL = `https://api.coingecko.com/api/v3/coins/${asset}/market_chart?vs_currency=usd&days=${selectedTimePeriod}`;\n                const response = await fetch(assetPriceURL);\n                const assetPriceData = await response.json();\n                const assetPriceAndTime = await assetPriceData.prices;\n                singleAssetPriceData = [];\n                assetPriceAndTime.forEach(array => {\n                    const justPrice = array[1];\n                    singleAssetPriceData.push(justPrice);\n                });\n                listOfAssetPrices.push(singleAssetPriceData);\n            };\n            for (let i = 0; i < selectedAssetNames.length; i++) {\n                let newDataObject = {\n                    label: `Price of ${selectedAssetNames[i]}`,\n                    data: listOfAssetPrices[i],\n                    fill: false,\n                    pointRadius: 0,\n                    borderWidth: 1,\n                    backgroundColor: \"rgba(255, 255, 255)\",\n                    borderColor: \"rgb(255, 255, 255)\",\n                };\n                assetPricesData.push(newDataObject);\n            }\n            displayedChart.data.datasets = assetPricesData;\n            displayedChart.update();\n        }\n        catch(error) {\n            console.log('cannot get new timeframe data from coingecko...')\n            console.log(error);\n        }\n    }\n    // let newDataObject = {\n    //     label: `Price of ${selectedAssetNames[i]}`,\n    //     data: AddedPriceData,\n    //     fill: false,\n    //     pointRadius: 0,\n    //     borderWidth: 1,\n    //     backgroundColor: \"rgba(255, 255, 255)\",\n    //     borderColor: \"rgb(255, 255, 255)\",\n    // };\n    // assetPricesData.push(newDataObject);\n    fetchNewTimeframe();\n};\nconst selectedTimePeriodEl = document.querySelector('.timeframeList');\nselectedTimePeriodEl.addEventListener('change', changeTimeframe);\n\n    // CODE FOR CHANGING THE CHART SCALE\nlet chartScale = 'linear'; //logarithmic or linear\nconst autoChartOption = document.querySelector('.autoChartOption');\nautoChartOption.addEventListener('click', changeChartScale)\nconst logChartOption = document.querySelector('.logChartOption');\nlogChartOption.addEventListener('click', changeChartScale);\nfunction changeChartScale(event) {\n\n    if (event.target.classList.contains('autoChartOption')) {\n        autoChartOption.style.backgroundColor = 'rgb(128, 128, 128, 0.6)';\n        logChartOption.style.backgroundColor = 'rgb(128, 128, 128, 0.2)';\n        chartScale = 'linear';\n        displayedChart.options.scales.y.type = chartScale;\n        displayedChart.update();\n    } else {\n        autoChartOption.style.backgroundColor = 'rgb(128, 128, 128, 0.2)';\n        logChartOption.style.backgroundColor = 'rgb(128, 128, 128, 0.6)';\n        chartScale = 'logarithmic';\n        displayedChart.options.scales.y.type = chartScale;\n        displayedChart.update();\n    }\n}\n\n    // CODE FOR THE CHART.JS LIBRARY\nconst ctx = document.querySelector('.chart');\n\nconst displayedChart = new Chart(ctx, {\n    type: 'line',  // data: assetPricesData,\n    data: {\n        labels: chartTimeframe,\n        datasets: assetPricesData,\n    },\n    options: {\n        scales: {\n            y: {\n                ticks: {\n                    callback: function(value, index, ticks) {\n                        return '$' + value;\n                    }\n                },\n                display: true,\n                type: chartScale //logarithmic or linear\n            }\n        }\n    }\n  });\n\n// event listener for keeping canvas proper size\nonresize = () => {\n    ctx.style.width = '100%';\n    ctx.style.height = '100%';\n}"]}